{"ast":null,"code":"import { baseURL } from \"../constants\";\nimport axios from \"axios\"; //import store from '../../../Store';\n// action types\n\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport const SET_AUTH_TOKEN = \"SET_AUTH_TOKEN\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\nexport const SET_VALUE_AUTH = \"SET_VALUE_AUTH\";\nexport const SET_IS_AUTH = \"SET_IS_AUTH\";\nexport const SET_IS_ADMIN = \"SET_IS_ADMIN\";\nexport const SET_LIST_VALUE = \"SET_LIST_VALUE\";\nexport const SET_ADD_VALUE = \"SET_ADD_VALUE\";\nexport const SET_CURRENT_TRAINER = \"SET_CURRENT_TRAINER\"; //import AsyncStorage from \"@react-native-community/async-storage\";\n// action creators\n\nexport const loginRequest = () => {\n  return {\n    type: LOGIN_REQUEST\n  };\n};\nexport const loginSuccess = loginData => {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: loginData\n  };\n};\nexport const loginFailure = errMsg => {\n  return {\n    type: LOGIN_FAILURE,\n    payload: errMsg\n  };\n}; // save the auth token to redux store\n\nexport const setAuthToken = authToken => {\n  return {\n    type: SET_AUTH_TOKEN,\n    payload: authToken\n  };\n};\nexport const setCurrentUser = userId => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: userId\n  };\n};\nexport const setCurrentTrainer = data => {\n  return {\n    type: SET_CURRENT_TRAINER,\n    payload: data\n  };\n};\nexport const setValueAuth = value => {\n  return {\n    type: SET_VALUE_AUTH,\n    payload: value\n  };\n};\nexport const setIsAuth = () => {\n  return {\n    type: SET_IS_AUTH\n  };\n};\nexport const setIsAdmin = () => {\n  return {\n    type: SET_IS_ADMIN\n  };\n};\nexport const setListValue = value => {\n  return {\n    type: SET_LIST_VALUE,\n    payload: value\n  };\n};\nexport const setAddValue = value => {\n  return {\n    type: SET_ADD_VALUE,\n    payload: value\n  };\n};\n/*export const clearAppData = () => {\n  return async function () {\n    try {\n      const keys = await AsyncStorage.getAllKeys();\n      await AsyncStorage.multiRemove(keys);\n    } catch (error) {\n      console.error(\"Error clearing app data.\");\n    }\n  };\n};\n\nexport const logout = () => {\n  return function (dispatch) {\n    // setAuthenticationToken(false);\n    dispatch(setCurrentUser({}));\n\n    dispatch({\n      type: LOGOUT_USER,\n    });\n  };\n};*/\n// async impure action creator enabled by redux-thunk\n\nexport const login = loginData => {\n  return dispatch => {\n    dispatch(loginRequest());\n    axios({\n      method: \"post\",\n      url: \"/login\",\n      baseURL: baseURL,\n      data: {\n        email: loginData.email,\n        password: loginData.password\n      }\n    }).then(res => {\n      if (res.data.value) {\n        dispatch(loginSuccess(res.data));\n      } else {\n        dispatch(loginFailure(res.data.message));\n      }\n    }).catch(err => {\n      dispatch(loginFailure(err.response.data.message));\n    });\n  };\n};\nexport const setaddvalue = value => {\n  return dispatch => {\n    dispatch(setAddValue(value));\n  };\n};\nexport const setvalueauth = value => {\n  return dispatch => {\n    dispatch(setValueAuth(value));\n  };\n};\nexport const setisauth = () => {\n  return dispatch => {\n    dispatch(setIsAuth());\n  };\n};\nexport const setisadmin = () => {\n  return dispatch => {\n    dispatch(setIsAdmin());\n  };\n};\nexport const setlistvalue = value => {\n  return dispatch => {\n    dispatch(setListValue(value));\n  };\n};\nexport const setcurrenttrainer = data => {\n  console.log(data);\n  console.log(\"iam her\");\n  return dispatch => {\n    dispatch(setCurrentTrainer(data));\n  };\n};","map":{"version":3,"sources":["/Users/mactouda/stage2A/SiteFormation/src/Actions/loginActions.js"],"names":["baseURL","axios","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","SET_AUTH_TOKEN","SET_CURRENT_USER","LOGOUT_USER","SET_VALUE_AUTH","SET_IS_AUTH","SET_IS_ADMIN","SET_LIST_VALUE","SET_ADD_VALUE","SET_CURRENT_TRAINER","loginRequest","type","loginSuccess","loginData","payload","loginFailure","errMsg","setAuthToken","authToken","setCurrentUser","userId","setCurrentTrainer","data","setValueAuth","value","setIsAuth","setIsAdmin","setListValue","setAddValue","login","dispatch","method","url","email","password","then","res","message","catch","err","response","setaddvalue","setvalueauth","setisauth","setisadmin","setlistvalue","setcurrenttrainer","console","log"],"mappings":"AACA,SAASA,OAAT,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;AAEA;;AACA,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B,C,CACP;AAGA;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAEb;AADD,GAAP;AAGD,CAJM;AAKP,OAAO,MAAMc,YAAY,GAAIC,SAAD,IAAe;AACzC,SAAO;AACLF,IAAAA,IAAI,EAAEZ,aADD;AAELe,IAAAA,OAAO,EAAED;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAME,YAAY,GAAIC,MAAD,IAAY;AACtC,SAAO;AACLL,IAAAA,IAAI,EAAEX,aADD;AAELc,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMC,YAAY,GAAIC,SAAD,IAAe;AACzC,SAAO;AACLP,IAAAA,IAAI,EAAEV,cADD;AAELa,IAAAA,OAAO,EAAEI;AAFJ,GAAP;AAID,CALM;AAMP,OAAO,MAAMC,cAAc,GAAIC,MAAD,IAAY;AACxC,SAAO;AACLT,IAAAA,IAAI,EAAET,gBADD;AAELY,IAAAA,OAAO,EAAEM;AAFJ,GAAP;AAID,CALM;AAMP,OAAO,MAAMC,iBAAiB,GAAIC,IAAD,IAAU;AACzC,SAAO;AACLX,IAAAA,IAAI,EAAEF,mBADD;AAELK,IAAAA,OAAO,EAAEQ;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAW;AACrC,SAAO;AACLb,IAAAA,IAAI,EAAEP,cADD;AAELU,IAAAA,OAAO,EAAEU;AAFJ,GAAP;AAID,CALM;AAMP,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,SAAO;AACLd,IAAAA,IAAI,EAAEN;AADD,GAAP;AAID,CALM;AAMP,OAAO,MAAMqB,UAAU,GAAG,MAAM;AAC9B,SAAO;AACLf,IAAAA,IAAI,EAAEL;AADD,GAAP;AAID,CALM;AAMP,OAAO,MAAMqB,YAAY,GAAIH,KAAD,IAAW;AACrC,SAAO;AACLb,IAAAA,IAAI,EAAEJ,cADD;AAELO,IAAAA,OAAO,EAAEU;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMI,WAAW,GAAIJ,KAAD,IAAW;AACpC,SAAO;AACLb,IAAAA,IAAI,EAAEH,aADD;AAELM,IAAAA,OAAO,EAAEU;AAFJ,GAAP;AAID,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;AACA,OAAO,MAAMK,KAAK,GAAIhB,SAAD,IAAe;AAClC,SAAQiB,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACpB,YAAY,EAAb,CAAR;AACAb,IAAAA,KAAK,CAAC;AACJkC,MAAAA,MAAM,EAAE,MADJ;AAEJC,MAAAA,GAAG,EAAE,QAFD;AAGJpC,MAAAA,OAAO,EAAEA,OAHL;AAKJ0B,MAAAA,IAAI,EAAE;AACJW,QAAAA,KAAK,EAAEpB,SAAS,CAACoB,KADb;AAEJC,QAAAA,QAAQ,EAAErB,SAAS,CAACqB;AAFhB;AALF,KAAD,CAAL,CAUGC,IAVH,CAUSC,GAAD,IAAS;AACb,UAAIA,GAAG,CAACd,IAAJ,CAASE,KAAb,EAAoB;AAClBM,QAAAA,QAAQ,CAAClB,YAAY,CAACwB,GAAG,CAACd,IAAL,CAAb,CAAR;AAED,OAHD,MAGO;AACLQ,QAAAA,QAAQ,CAACf,YAAY,CAACqB,GAAG,CAACd,IAAJ,CAASe,OAAV,CAAb,CAAR;AACD;AACF,KAjBH,EAmBGC,KAnBH,CAmBUC,GAAD,IAAS;AAGdT,MAAAA,QAAQ,CAACf,YAAY,CAACwB,GAAG,CAACC,QAAJ,CAAalB,IAAb,CAAkBe,OAAnB,CAAb,CAAR;AAED,KAxBH;AAyBD,GA3BD;AA4BD,CA7BM;AA8BP,OAAO,MAAMI,WAAW,GAAIjB,KAAD,IAAW;AACpC,SAAQM,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACF,WAAW,CAACJ,KAAD,CAAZ,CAAR;AACD,GAFD;AAGD,CAJM;AAKP,OAAO,MAAMkB,YAAY,GAAIlB,KAAD,IAAW;AACrC,SAAQM,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACP,YAAY,CAACC,KAAD,CAAb,CAAR;AACD,GAFD;AAGD,CAJM;AAKP,OAAO,MAAMmB,SAAS,GAAG,MAAM;AAC7B,SAAQb,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACL,SAAS,EAAV,CAAR;AACD,GAFD;AAGD,CAJM;AAKP,OAAO,MAAMmB,UAAU,GAAG,MAAM;AAC9B,SAAQd,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACJ,UAAU,EAAX,CAAR;AACD,GAFD;AAGD,CAJM;AAKP,OAAO,MAAMmB,YAAY,GAAIrB,KAAD,IAAW;AACrC,SAAQM,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACH,YAAY,CAACH,KAAD,CAAb,CAAR;AACD,GAFD;AAGD,CAJM;AAKP,OAAO,MAAMsB,iBAAiB,GAAIxB,IAAD,IAAU;AACzCyB,EAAAA,OAAO,CAACC,GAAR,CAAY1B,IAAZ;AACAyB,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,SAAQlB,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACT,iBAAiB,CAACC,IAAD,CAAlB,CAAR;AACD,GAFD;AAID,CAPM","sourcesContent":["\nimport { baseURL } from \"../constants\";\nimport axios from \"axios\";\n//import store from '../../../Store';\n\n// action types\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport const SET_AUTH_TOKEN = \"SET_AUTH_TOKEN\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\nexport const SET_VALUE_AUTH = \"SET_VALUE_AUTH\";\nexport const SET_IS_AUTH = \"SET_IS_AUTH\";\nexport const SET_IS_ADMIN = \"SET_IS_ADMIN\";\nexport const SET_LIST_VALUE = \"SET_LIST_VALUE\";\nexport const SET_ADD_VALUE = \"SET_ADD_VALUE\";\nexport const SET_CURRENT_TRAINER = \"SET_CURRENT_TRAINER\";\n//import AsyncStorage from \"@react-native-community/async-storage\";\n\n\n// action creators\nexport const loginRequest = () => {\n  return {\n    type: LOGIN_REQUEST,\n  };\n};\nexport const loginSuccess = (loginData) => {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: loginData,\n  };\n};\n\nexport const loginFailure = (errMsg) => {\n  return {\n    type: LOGIN_FAILURE,\n    payload: errMsg,\n  };\n};\n\n// save the auth token to redux store\nexport const setAuthToken = (authToken) => {\n  return {\n    type: SET_AUTH_TOKEN,\n    payload: authToken,\n  };\n};\nexport const setCurrentUser = (userId) => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: userId,\n  };\n};\nexport const setCurrentTrainer = (data) => {\n  return {\n    type: SET_CURRENT_TRAINER,\n    payload: data,\n  };\n};\n\nexport const setValueAuth = (value) => {\n  return {\n    type: SET_VALUE_AUTH,\n    payload: value,\n  };\n};\nexport const setIsAuth = () => {\n  return {\n    type: SET_IS_AUTH,\n    \n  };\n};\nexport const setIsAdmin = () => {\n  return {\n    type: SET_IS_ADMIN,\n    \n  };\n};\nexport const setListValue = (value) => {\n  return {\n    type: SET_LIST_VALUE,\n    payload: value,\n  };\n};\n\nexport const setAddValue = (value) => {\n  return {\n    type: SET_ADD_VALUE,\n    payload: value,\n  };\n};\n\n/*export const clearAppData = () => {\n  return async function () {\n    try {\n      const keys = await AsyncStorage.getAllKeys();\n      await AsyncStorage.multiRemove(keys);\n    } catch (error) {\n      console.error(\"Error clearing app data.\");\n    }\n  };\n};\n\nexport const logout = () => {\n  return function (dispatch) {\n    // setAuthenticationToken(false);\n    dispatch(setCurrentUser({}));\n\n    dispatch({\n      type: LOGOUT_USER,\n    });\n  };\n};*/\n\n\n\n// async impure action creator enabled by redux-thunk\nexport const login = (loginData) => {\n  return (dispatch) => {\n    dispatch(loginRequest());\n    axios({\n      method: \"post\",\n      url: \"/login\",\n      baseURL: baseURL,\n\n      data: {\n        email: loginData.email,\n        password: loginData.password,\n      },\n    })\n      .then((res) => {\n        if (res.data.value) {\n          dispatch(loginSuccess(res.data));\n          \n        } else {\n          dispatch(loginFailure(res.data.message));\n        }\n      })\n\n      .catch((err) => {\n       \n\n        dispatch(loginFailure(err.response.data.message));\n        \n      });\n  };\n};\nexport const setaddvalue = (value) => {\n  return (dispatch) => {\n    dispatch(setAddValue(value));\n  };\n};\nexport const setvalueauth = (value) => {\n  return (dispatch) => {\n    dispatch(setValueAuth(value));\n  };\n};\nexport const setisauth = () => {\n  return (dispatch) => {\n    dispatch(setIsAuth());\n  };\n};\nexport const setisadmin = () => {\n  return (dispatch) => {\n    dispatch(setIsAdmin());\n  };\n};\nexport const setlistvalue = (value) => {\n  return (dispatch) => {\n    dispatch(setListValue(value));\n  };\n};\nexport const setcurrenttrainer = (data) => {\n  console.log(data);\n  console.log(\"iam her\")\n  return (dispatch) => {\n    dispatch(setCurrentTrainer(data));\n  };\n  \n};"]},"metadata":{},"sourceType":"module"}