{"ast":null,"code":"import { baseURL } from \"../constants\";\nimport axios from \"axios\"; //import store from '../../../Store';\n// action types\n\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport const SET_AUTH_TOKEN = \"SET_AUTH_TOKEN\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\nexport const SET_VALUE_AUTH = \"SET_VALUE_AUTH\";\nexport const SET_IS_AUTH = \"SET_IS_AUTH\";\nexport const SET_IS_ADMIN = \"SET_IS_ADMIN\";\nexport const SET_LIST_VALUE = \"SET_LIST_VALUE\"; //import AsyncStorage from \"@react-native-community/async-storage\";\n// action creators\n\nexport const loginRequest = () => {\n  return {\n    type: LOGIN_REQUEST\n  };\n};\nexport const loginSuccess = loginData => {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: loginData\n  };\n};\nexport const loginFailure = errMsg => {\n  return {\n    type: LOGIN_FAILURE,\n    payload: errMsg\n  };\n}; // save the auth token to redux store\n\nexport const setAuthToken = authToken => {\n  return {\n    type: SET_AUTH_TOKEN,\n    payload: authToken\n  };\n};\nexport const setCurrentUser = userId => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: userId\n  };\n};\nexport const setValueAuth = value => {\n  return {\n    type: SET_VALUE_AUTH,\n    payload: value\n  };\n};\nexport const setIsAuth = () => {\n  return {\n    type: SET_IS_AUTH\n  };\n};\nexport const setIsAdmin = () => {\n  return {\n    type: SET_IS_ADMIN\n  };\n};\nexport const setListValue = () => {\n  return {\n    type: SET_LIST_VALUE\n  };\n};\n/*export const clearAppData = () => {\n  return async function () {\n    try {\n      const keys = await AsyncStorage.getAllKeys();\n      await AsyncStorage.multiRemove(keys);\n    } catch (error) {\n      console.error(\"Error clearing app data.\");\n    }\n  };\n};\n\nexport const logout = () => {\n  return function (dispatch) {\n    // setAuthenticationToken(false);\n    dispatch(setCurrentUser({}));\n\n    dispatch({\n      type: LOGOUT_USER,\n    });\n  };\n};*/\n// async impure action creator enabled by redux-thunk\n\nexport const login = loginData => {\n  return dispatch => {\n    dispatch(loginRequest());\n    axios({\n      method: \"post\",\n      url: \"/login\",\n      baseURL: baseURL,\n      data: {\n        email: loginData.email,\n        password: loginData.password\n      }\n    }).then(res => {\n      if (res.data.value) {\n        dispatch(loginSuccess(res.data));\n      } else {\n        dispatch(loginFailure(res.data.message));\n      }\n    }).catch(err => {\n      dispatch(loginFailure(err.response.data.message));\n    });\n  };\n};\nexport const setvalueauth = value => {\n  return dispatch => {\n    dispatch(setValueAuth(value));\n  };\n};\nexport const setisauth = () => {\n  return dispatch => {\n    dispatch(setIsAuth());\n  };\n};\nexport const setisadmin = () => {\n  return dispatch => {\n    dispatch(setIsAdmin());\n  };\n};\nexport const setlistvalue = () => {\n  return dispatch => {\n    dispatch(setListValue());\n  };\n};","map":{"version":3,"sources":["/Users/mactouda/stage2A/SiteFormation/src/Actions/loginActions.js"],"names":["baseURL","axios","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","SET_AUTH_TOKEN","SET_CURRENT_USER","LOGOUT_USER","SET_VALUE_AUTH","SET_IS_AUTH","SET_IS_ADMIN","SET_LIST_VALUE","loginRequest","type","loginSuccess","loginData","payload","loginFailure","errMsg","setAuthToken","authToken","setCurrentUser","userId","setValueAuth","value","setIsAuth","setIsAdmin","setListValue","login","dispatch","method","url","data","email","password","then","res","message","catch","err","response","setvalueauth","setisauth","setisadmin","setlistvalue"],"mappings":"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","sourcesContent":["\nimport { baseURL } from \"../constants\";\nimport axios from \"axios\";\n//import store from '../../../Store';\n\n// action types\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport const SET_AUTH_TOKEN = \"SET_AUTH_TOKEN\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\nexport const SET_VALUE_AUTH = \"SET_VALUE_AUTH\";\nexport const SET_IS_AUTH = \"SET_IS_AUTH\";\nexport const SET_IS_ADMIN = \"SET_IS_ADMIN\";\nexport const SET_LIST_VALUE = \"SET_LIST_VALUE\";\n//import AsyncStorage from \"@react-native-community/async-storage\";\n\n\n// action creators\nexport const loginRequest = () => {\n  return {\n    type: LOGIN_REQUEST,\n  };\n};\nexport const loginSuccess = (loginData) => {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: loginData,\n  };\n};\n\nexport const loginFailure = (errMsg) => {\n  return {\n    type: LOGIN_FAILURE,\n    payload: errMsg,\n  };\n};\n\n// save the auth token to redux store\nexport const setAuthToken = (authToken) => {\n  return {\n    type: SET_AUTH_TOKEN,\n    payload: authToken,\n  };\n};\nexport const setCurrentUser = (userId) => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: userId,\n  };\n};\n\nexport const setValueAuth = (value) => {\n  return {\n    type: SET_VALUE_AUTH,\n    payload: value,\n  };\n};\nexport const setIsAuth = () => {\n  return {\n    type: SET_IS_AUTH,\n    \n  };\n};\nexport const setIsAdmin = () => {\n  return {\n    type: SET_IS_ADMIN,\n    \n  };\n};\nexport const setListValue = () => {\n  return {\n    type: SET_LIST_VALUE,\n    \n  };\n};\n/*export const clearAppData = () => {\n  return async function () {\n    try {\n      const keys = await AsyncStorage.getAllKeys();\n      await AsyncStorage.multiRemove(keys);\n    } catch (error) {\n      console.error(\"Error clearing app data.\");\n    }\n  };\n};\n\nexport const logout = () => {\n  return function (dispatch) {\n    // setAuthenticationToken(false);\n    dispatch(setCurrentUser({}));\n\n    dispatch({\n      type: LOGOUT_USER,\n    });\n  };\n};*/\n\n\n\n// async impure action creator enabled by redux-thunk\nexport const login = (loginData) => {\n  return (dispatch) => {\n    dispatch(loginRequest());\n    axios({\n      method: \"post\",\n      url: \"/login\",\n      baseURL: baseURL,\n\n      data: {\n        email: loginData.email,\n        password: loginData.password,\n      },\n    })\n      .then((res) => {\n        if (res.data.value) {\n          dispatch(loginSuccess(res.data));\n          \n        } else {\n          dispatch(loginFailure(res.data.message));\n        }\n      })\n\n      .catch((err) => {\n       \n\n        dispatch(loginFailure(err.response.data.message));\n        \n      });\n  };\n};\n\nexport const setvalueauth = (value) => {\n  return (dispatch) => {\n    dispatch(setValueAuth(value));\n  };\n};\nexport const setisauth = () => {\n  return (dispatch) => {\n    dispatch(setIsAuth());\n  };\n};\nexport const setisadmin = () => {\n  return (dispatch) => {\n    dispatch(setIsAdmin());\n  };\n};\nexport const setlistvalue = () => {\n  return (dispatch) => {\n    dispatch(setListValue());\n  };\n};"]},"metadata":{},"sourceType":"module"}