{"ast":null,"code":"import axios from \"axios\"; //import store from '../../../Store';\n// action types\n\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport const SET_AUTH_TOKEN = \"SET_AUTH_TOKEN\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\"; //import AsyncStorage from \"@react-native-community/async-storage\";\n\nimport { baseURL } from \"../constants\"; // action creators\n\nexport const loginRequest = () => {\n  return {\n    type: LOGIN_REQUEST\n  };\n};\nexport const loginSuccess = loginData => {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: loginData\n  };\n};\nexport const loginFailure = errMsg => {\n  return {\n    type: LOGIN_FAILURE,\n    payload: errMsg\n  };\n}; // save the auth token to redux store\n\nexport const setAuthToken = authToken => {\n  return {\n    type: SET_AUTH_TOKEN,\n    payload: authToken\n  };\n};\nexport const setCurrentUser = userId => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: userId\n  };\n};\nexport const clearAppData = () => {\n  return async function () {\n    try {\n      const keys = await AsyncStorage.getAllKeys();\n      await AsyncStorage.multiRemove(keys);\n    } catch (error) {\n      console.error(\"Error clearing app data.\");\n    }\n  };\n};\nexport const logout = () => {\n  return function (dispatch) {\n    // setAuthenticationToken(false);\n    dispatch(setCurrentUser({}));\n    dispatch({\n      type: LOGOUT_USER\n    });\n  };\n}; // async impure action creator enabled by redux-thunk\n\nexport const login = loginData => {\n  return dispatch => {\n    dispatch(loginRequest());\n    axios({\n      method: \"post\",\n      url: \"/login\",\n      baseURL: baseURL,\n      data: {\n        email: loginData.email,\n        password: loginData.password\n      }\n    }).then(res => {\n      if (res.data.value) {\n        dispatch(loginSuccess(res.data));\n      } else {\n        dispatch(loginFailure(res.data.message));\n      }\n    }).catch(err => {\n      dispatch(loginFailure(err.response.data.message));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mactouda/stage2A/SiteFormation/src/Actions/loginActions.js"],"names":["axios","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","SET_AUTH_TOKEN","SET_CURRENT_USER","LOGOUT_USER","baseURL","loginRequest","type","loginSuccess","loginData","payload","loginFailure","errMsg","setAuthToken","authToken","setCurrentUser","userId","clearAppData","keys","AsyncStorage","getAllKeys","multiRemove","error","console","logout","dispatch","login","method","url","data","email","password","then","res","value","message","catch","err","response"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n//import store from '../../../Store';\n\n// action types\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport const SET_AUTH_TOKEN = \"SET_AUTH_TOKEN\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\n//import AsyncStorage from \"@react-native-community/async-storage\";\nimport { baseURL } from \"../constants\";\n\n// action creators\nexport const loginRequest = () => {\n  return {\n    type: LOGIN_REQUEST,\n  };\n};\nexport const loginSuccess = (loginData) => {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: loginData,\n  };\n};\n\nexport const loginFailure = (errMsg) => {\n  return {\n    type: LOGIN_FAILURE,\n    payload: errMsg,\n  };\n};\n\n// save the auth token to redux store\nexport const setAuthToken = (authToken) => {\n  return {\n    type: SET_AUTH_TOKEN,\n    payload: authToken,\n  };\n};\nexport const setCurrentUser = (userId) => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: userId,\n  };\n};\n\nexport const clearAppData = () => {\n  return async function () {\n    try {\n      const keys = await AsyncStorage.getAllKeys();\n      await AsyncStorage.multiRemove(keys);\n    } catch (error) {\n      console.error(\"Error clearing app data.\");\n    }\n  };\n};\n\nexport const logout = () => {\n  return function (dispatch) {\n    // setAuthenticationToken(false);\n    dispatch(setCurrentUser({}));\n\n    dispatch({\n      type: LOGOUT_USER,\n    });\n  };\n};\n\n// async impure action creator enabled by redux-thunk\nexport const login = (loginData) => {\n  return (dispatch) => {\n    dispatch(loginRequest());\n    axios({\n      method: \"post\",\n      url: \"/login\",\n      baseURL: baseURL,\n\n      data: {\n        email: loginData.email,\n        password: loginData.password,\n      },\n    })\n      .then((res) => {\n        if (res.data.value) {\n          dispatch(loginSuccess(res.data));\n        } else {\n          dispatch(loginFailure(res.data.message));\n        }\n      })\n\n      .catch((err) => {\n       \n\n        dispatch(loginFailure(err.response.data.message));\n        \n      });\n  };\n};"]},"metadata":{},"sourceType":"module"}